/**
 * Generated by the Inrupt Artifact Generator [@inrupt/artifact-generator], version [3.1.1]
 * as part of artifact: [testSchema], version: [0.1.0]
 * on 'Monday, October 2, 2023 11:19 AM'.
 *
 * Vocabulary built from vocab list file: [./test/resources/watcher/vocab-list-watch.yml].
 * The generator detected the following terms in the source vocabulary:
 *  - Classes: [1]
 *  - Properties: [3]
 *  - Literals: [0]
 *  - Constant IRIs: [0]
 *  - Constant strings: [0]
 *
 * [Generator provided] - A schema snippet
 */
package com.example.java.packagename;

import org.eclipse.rdf4j.model.IRI;
import org.eclipse.rdf4j.model.Namespace;
import org.eclipse.rdf4j.model.impl.SimpleNamespace;
import org.eclipse.rdf4j.model.impl.SimpleValueFactory;

import org.solid.common.vocab.Vocab;
import org.solid.common.vocab.VocabTerm;
import com.inrupt.solid.common.vocab.VocabTermImpl;

/**
 * [Generator provided] - A schema snippet
 *
 * Namespace IRI: [https://schema.org/]
 */
public class SCHEMA implements Vocab {
    public static final String PREFIX = "schema";
    public static final String NAMESPACE = "https://schema.org/";

    public static final IRI NAMESPACE_IRI = SimpleValueFactory.getInstance().createIRI("https://schema.org/");
    public static final Namespace NS = new SimpleNamespace(PREFIX, NAMESPACE);

    @Override
    public final String getNamespacePrefix() {
        return PREFIX;
    }

    @Override
    public final IRI getNamespaceIri() {
        return NAMESPACE_IRI;
    }

    private static String FULL_IRI(final String localName) {
        return NAMESPACE + localName;
    }

    // *****************
    // All the Classes.
    // *****************

    /**
     * A person (alive, dead, undead, or fictional).
     *
     * This term provides descriptions only with no explicit locale.
     */
    public static final VocabTerm Person = new VocabTermImpl(FULL_IRI("Person"), true)
        .addLabelNoLanguage("Person")
        .addCommentNoLanguage("A person (alive, dead, undead, or fictional).");


    // *******************
    // All the Properties.
    // *******************

    /**
     * Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the name property.
     *
     * This term provides descriptions only with no explicit locale.
     */
    public static final VocabTerm givenName = new VocabTermImpl(FULL_IRI("givenName"), true)
        .addLabelNoLanguage("givenName")
        .addCommentNoLanguage("Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the name property.");

    /**
     * Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the name property.
     *
     * This term provides descriptions only with no explicit locale.
     */
    public static final VocabTerm familyName = new VocabTermImpl(FULL_IRI("familyName"), true)
        .addLabelNoLanguage("familyName")
        .addCommentNoLanguage("Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the name property.");

    /**
     * The country. For example, USA. You can also provide the two-letter <a href="http://en.wikipedia.org/wiki/ISO_3166-1">ISO 3166-1 alpha-2 country code</a>.
     *
     * This term provides descriptions only with no explicit locale.
     */
    public static final VocabTerm addressCountry = new VocabTermImpl(FULL_IRI("addressCountry"), true)
        .addLabelNoLanguage("addressCountry")
        .addCommentNoLanguage("The country. For example, USA. You can also provide the two-letter <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1\">ISO 3166-1 alpha-2 country code</a>.");
 }
