/**
 * Generated by the Inrupt Artifact Generator [@inrupt/artifact-generator], version [3.1.1]
 * as part of artifact: [generated-vocab-common-TEST], version: [10.11.12]
 * on 'Monday, October 2, 2023 11:19 AM'.
 *
 * Vocabulary built from vocab list file: [./test/resources/yamlConfig/vocab-strict.yml].
 * The generator detected the following terms in the source vocabulary:
 *  - Classes: [1]
 *  - Properties: [3]
 *  - Literals: [0]
 *  - Constant IRIs: [0]
 *  - Constant strings: [0]
 *
 * [Generator provided] - Snippet of Schema.org from Google, Microsoft, Yahoo and Yandex.
 */

// We prefix our local variables with underscores to (hopefully!) prevent
// potential names clashes with terms from vocabularies.
const { VocabTerm: _VocabTerm, getLocalStore } = require("@inrupt/solid-common-vocab");
const _DataFactory = require("@rdfjs/data-model");

const { namedNode: _namedNode } = _DataFactory;

function _NS(localName) {
  return _namedNode(`https://schema.org/${localName}`);
}

/**
 * [Generator provided] - Snippet of Schema.org from Google, Microsoft, Yahoo and Yandex.
 *
 * Namespace IRI: [https://schema.org/]
 */
const SNIPPET = {
  PREFIX: "snippet",
  NAMESPACE: "https://schema.org/",
  PREFIX_AND_NAMESPACE: { "snippet": "https://schema.org/" },
  NS: _NS,

  // *****************
  // All the Classes.
  // *****************

  /**
   * A person (alive, dead, undead, or fictional).
   *
   * This term provides descriptions only with no explicit locale.
   */
  Person: new _VocabTerm(
    _NS("Person"),
    _DataFactory,
    getLocalStore(),
    true
  )
    .addType(_namedNode("http://www.w3.org/2000/01/rdf-schema#Class"))
    .addLabelNoLanguage(`Person`)
    .addCommentNoLanguage(`A person (alive, dead, undead, or fictional).`),


  // *******************
  // All the Properties.
  // *******************

  /**
   * Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the name property.
   *
   * This term provides descriptions only with no explicit locale.
   */
  givenName: new _VocabTerm(
    _NS("givenName"),
    _DataFactory,
    getLocalStore(),
    true
  )
    .addType(_namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"))
    .addLabelNoLanguage(`givenName`)
    .addCommentNoLanguage(`Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the name property.`),

  /**
   * Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the name property.
   *
   * This term provides descriptions only with no explicit locale.
   */
  familyName: new _VocabTerm(
    _NS("familyName"),
    _DataFactory,
    getLocalStore(),
    true
  )
    .addType(_namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"))
    .addLabelNoLanguage(`familyName`)
    .addCommentNoLanguage(`Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the name property.`),

  /**
   * The country. For example, USA. You can also provide the two-letter <a href="http://en.wikipedia.org/wiki/ISO_3166-1">ISO 3166-1 alpha-2 country code</a>.
   *
   * This term provides descriptions only with no explicit locale.
   */
  addressCountry: new _VocabTerm(
    _NS("addressCountry"),
    _DataFactory,
    getLocalStore(),
    true
  )
    .addType(_namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"))
    .addLabelNoLanguage(`addressCountry`)
    .addCommentNoLanguage(`The country. For example, USA. You can also provide the two-letter <a href="http://en.wikipedia.org/wiki/ISO_3166-1">ISO 3166-1 alpha-2 country code</a>.`),

}

module.exports = SNIPPET;
